import net.fabricmc.loom.api.mappings.layered.MappingContext
import net.fabricmc.loom.api.mappings.layered.MappingLayer
import net.fabricmc.loom.api.mappings.layered.MappingsNamespace
import net.fabricmc.loom.configuration.providers.mappings.LayeredMappingSpec
import net.fabricmc.loom.configuration.providers.mappings.LayeredMappingSpecBuilderImpl
import net.fabricmc.loom.configuration.providers.mappings.LayeredMappingsProcessor
import net.fabricmc.loom.configuration.providers.mappings.intermediary.IntermediaryMappingLayer
import net.fabricmc.mappingio.MappingVisitor
import net.fabricmc.mappingio.tree.MemoryMappingTree

plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
	id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'GeckoLib'
		url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// massive hack to allow geckolib to work with mojmap
	mappings loom.layered() {
		var builder = new LayeredMappingSpecBuilderImpl()
		builder.officialMojangMappings()
		builder.parchment("org.parchmentmc.data:${project.parchment_mappings}@zip")
		LayeredMappingSpec firstPassMappingSpec = builder.build()

		it.addLayer({ MappingContext mappingContext ->
			return new MappingLayer() {

				@SuppressWarnings('GroovyAssignabilityCheck')
				@Override
				void visit(MappingVisitor mappingVisitor) throws IOException {
					// process and read current mappings state
					LayeredMappingsProcessor layeredMappingsProcessor = new LayeredMappingsProcessor(firstPassMappingSpec)
					MemoryMappingTree memoryMappingTree = layeredMappingsProcessor.getMappings(layeredMappingsProcessor.resolveLayers(mappingContext))

					memoryMappingTree.getClasses().forEach({classEntry ->
						classEntry.methods.forEach(methodEntry -> {
							if (methodEntry.getName(MappingsNamespace.NAMED.toString()) == "getTextureLocation") { //  && methodEntry.comment == "Returns the location of an entity's texture."
								//noinspection GroovyAccessibility
								methodEntry.srcName = "_getTextureLocation"
							}
						})
					})

					memoryMappingTree.accept(mappingVisitor)
				}

				@Override
				MappingsNamespace getSourceNamespace() {
					return MappingsNamespace.NAMED
				}

				@Override
				List<Class<? extends MappingLayer>> dependsOn() {
					return List.of(IntermediaryMappingLayer.class) // MojangMappingLayer.class
				}
			}
		})
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// for some reason the native and normal jffi clash, so we have to just use the native for some stupid reason
	modImplementation ("org.lmdbjava:lmdbjava:0.8.2") {
		exclude group: "com.github.jnr", module: "jffi"
	}
	modImplementation "com.github.jnr:jffi:1.3.9"
	runtimeOnly "com.github.jnr:jffi:1.3.9:native"
	include "org.lmdbjava:lmdbjava:0.8.2"

	modImplementation "software.bernie.geckolib:geckolib-fabric-1.18:3.0.36"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
