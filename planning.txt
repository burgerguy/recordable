custom records should have name and lore (title and author)
custom color?

nbt should have dictionary and raw data

what's the deal with registry sync?

for client with unknown sound, play nothing for that note and show in toast notif


opt A:
normal jukebox should play mono

custom should play stereo with speakers

maybe something with headphones?
(render the wire lol)

opt B:
normal jukebox should play stereo and just get quieter the further away you are


volume directly correlates with distance
distance = volume > 1.0F ? (double)(16.0F * volume) : 16.0

portable recorder for note block setups?

Lacquer
1 log/wood block

blank record in existing loot tables
or
L = lacquer
I = iron

L
I
L
or
LL
II

vinyl press

(maybe) Direct Metal Mastering?
copper blanks as master
C = copper

CC

diamond stylus
DMM Lathe


Broadcaster (server)
keep disc data in item nbt
maybe have item have uuid?
make jukebox block entity send custom packet when player enters radius
    - when client gets the packet, decode record data to Score and store in uuid to Score map (cache on client)
s2c packet includes the included music disc (uuid or ItemStack, not sure yet) and current tick
    - when client gets the packet, make a Player from the Score
s2c packet sent to all users in radius if interrupted, either thru isDone or thru specific events (ex jukebox break, disc eject)

Score (client/server??? not sure yet)
holds record data
can create Players

Player (client)
plays the associated sounds on each tick, maybe display thing on InGameHud on start

Recorder/Reciever (server)
takes in all sounds around it (server side)
inject into ServerWorld.playSound?

Disk (???)
holds Score
holds uuid

(at some point) midi conversion?


sound relative to block out of jukebox
output:
relative = false
pos = block + relative sound pos

sound relative to player out of headphones
output:
relative = true
pos = relative sound pos

only records get their sounds stopped (i think), so ignore stops for now

format:

per tick:
option 1:
2 bytes tick no. (unsigned)
1 byte sound count (unsigned)
(count * 24) byte sound list
option 2 (final tick):
2 bytes tick no. (unsigned)
1 byte sound count (value of 0)

per sound:
4 byte id (unsigned)
4 byte float relative x pos
4 byte float relative y pos
4 byte float relative z pos
4 byte float volume
4 byte float pitch

store record uuid/hash -> data in LMDB

delete LMDB entry if no instances of items exist anymore.
server cleanup after time elapsed or during save
maybe turn into command? could take a long time.

client never cleanup?
should clients even have file based dbs? should they instead be per-run maps?

add custom made sample discs to creative menu and dungeons

bring record player closer to recorder and abstract registries

account for record player block rotation to impact relative sound positions

TODO:
add dyeing of discs (done)
add title and author writing (done)
add animations to recorder (done)
move playing to jukebox (done)
display color in recorder/use color provider (nah)
fix sound, normalize and make more realistic (done, not for stereo tho)
add lmdb dynamic resizing (nah)
add lmbd mixins to avoid crash (done)
inject into gameevent and levelevent (mostly done)
fix rotation (done)

Press for vinyls, requires copper master

Label Creator
paint in label maker with dyes

Allow labels to be applied and removed from copper records via crafting, but vinyl has to have label applied during press process

copy discs with press with vinyls

playLocalSound has distance delay calculation, use on client would be easier, but on server would probably be better (do later)
TickableSoundInstance store in db (later)
handle recording other records playing, my own and default

fix relative audio with hrtf
make audio quieter when further away from jukebox

record looping?

try to get access to blockstate on client and server in screen, no need to sync thru screenhandler
figure out how to update when record is removed from result slot (maybe just stick with button?)

hold items and color state in labeler block entity NBT?

packet on draw to update dyes and BE levels, reverse when exit? maybe try to just do it on client side?

bug: add dye, don't finish a pattern, save and exit, re-enter and dyes will be used but levels will be reset to last finish.

entrypoint to add custom colors to palette

TODO: save given paint items, then give those back?

have undo and erase return an itemstack so we can add to the player (s & c or just s), then we can also call the packet to increase level (maybe just do this in ClientCanvas lol)
packet gets picked up by server and calls same method client did before the client sent the packet (they both end up running the same method)
reverse uncommitted changes on exit and clear added item history